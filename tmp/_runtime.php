<?php
 class core { public static function gpc($k, $var = 'G') { switch($var) { case 'G': $var = &$_GET; break; case 'P': $var = &$_POST; break; case 'C': $var = &$_COOKIE; break; case 'R': $var = isset($_GET[$k]) ? $_GET : (isset($_POST[$k]) ? $_POST : $_COOKIE); break; case 'S': $var = &$_SERVER; break; } return isset($var[$k]) ? $var[$k] : NULL; } public static function addslashes(&$var) { if(is_array($var)) { foreach($var as $k=>&$v) { self::addslashes($v); } } else { $var = addslashes($var); } return $var; } public static function stripslashes(&$var) { if(is_array($var)) { foreach($var as $k=>&$v) { self::stripslashes($v); } } else { $var = stripslashes($var); } return $var; } public static function htmlspecialchars(&$var) { if(is_array($var)) { foreach($var as $k=>&$v) { self::htmlspecialchars($v); } } else { $var = str_replace(array('&', '"', '<', '>'), array('&amp;', '&quot;', '&lt;', '&gt;'), $var); } return $var; } public static function urlencode($s) { $s = urlencode($s); return str_replace('-', '%2D', $s); } public static function urldecode($s) { return urldecode($s); } public static function json_decode($s) { return $s === FALSE ? FALSE : json_decode($s, 1); } public static function json_encode($data) { if(is_array($data) || is_object($data)) { $islist = is_array($data) && (empty($data) || array_keys($data) === range(0,count($data)-1)); if($islist) { $json = '['.implode(',', array_map(array('core', 'json_encode'), $data)).']'; } else { $items = Array(); foreach($data as $key => $value) $items[] = self::json_encode("$key").':'.self::json_encode($value); $json = '{'.implode(',', $items).'}'; } } elseif(is_string($data)) { $string = '"'.addcslashes($data, "\\\"\n\r\t/".chr(8).chr(12)).'"'; $json = ''; $len = strlen($string); for($i = 0; $i < $len; $i++ ) { $char = $string[$i]; $c1 = ord($char); if($c1 <128 ) { $json .= ($c1 > 31) ? $char : sprintf("\\u%04x", $c1); continue; } $c2 = ord($string[++$i]); if (($c1 & 32) === 0) { $json .= sprintf("\\u%04x", ($c1 - 192) * 64 + $c2 - 128); continue; } $c3 = ord($string[++$i]); if(($c1 & 16) === 0) { $json .= sprintf("\\u%04x", (($c1 - 224) <<12) + (($c2 - 128) << 6) + ($c3 - 128)); continue; } $c4 = ord($string[++$i]); if(($c1 & 8 ) === 0) { $u = (($c1 & 15) << 2) + (($c2>>4) & 3) - 1; $w1 = (54<<10) + ($u<<6) + (($c2 & 15) << 2) + (($c3>>4) & 3); $w2 = (55<<10) + (($c3 & 15)<<6) + ($c4-128); $json .= sprintf("\\u%04x\\u%04x", $w1, $w2); } } } else { $json = strtolower(var_export( $data, true )); } return $json; } public static function is_cmd() { return !isset($_SERVER['REMOTE_ADDR']); } public static function ob_handle($s) { if(!empty($_SERVER['ob_stack'])) { $gzipon = array_pop($_SERVER['ob_stack']); } else { $gzipon = 0; } $isfirst = count($_SERVER['ob_stack']) == 0; if($gzipon && !ini_get('zlib.output_compression') && function_exists('gzencode') && strpos(core::gpc('HTTP_ACCEPT_ENCODING', 'S'), 'gzip') !== FALSE) { $s = gzencode($s, 5); $isfirst && header("Content-Encoding: gzip"); $isfirst && header("Content-Length: ".strlen($s)); } else { if(ini_get('zlib.output_compression')) { $isfirst && header("Content-Encoding: gzip"); } else { $isfirst && header("Content-Encoding: none"); $isfirst && header("Content-Length: ".strlen($s)); } } return $s; } public static function ob_start($gzip = TRUE) { !isset($_SERVER['ob_stack']) && $_SERVER['ob_stack'] = array(); array_push($_SERVER['ob_stack'], $gzip); ob_start(array('core', 'ob_handle')); } public static function ob_end_clean() { !empty($_SERVER['ob_stack']) && count($_SERVER['ob_stack']) > 0 && ob_end_clean(); } public static function ob_clean() { !empty($_SERVER['ob_stack']) && count($_SERVER['ob_stack']) > 0 && ob_clean(); } public static function init_set() { if(DEBUG) { error_reporting(E_ALL | E_STRICT); @ini_set('display_errors', 'ON'); } else { error_reporting(E_ALL & ~E_NOTICE); } @set_magic_quotes_runtime(0); PHP_VERSION < '5.0' && exit('Required PHP version 5.0.* or later.'); } public static function init_supevar() { $_SERVER['starttime'] = microtime(1); $_SERVER['time'] = isset($_SERVER['REQUEST_TIME']) ? $_SERVER['REQUEST_TIME'] : time(); $_SERVER['ip'] = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : ''; $_SERVER['sqls'] = array(); (!isset($_SERVER['REQUEST_URI']) || (isset($_SERVER['HTTP_X_REWRITE_URL']) && $_SERVER['REQUEST_URI'] != $_SERVER['HTTP_X_REWRITE_URL'])) && self::fix_iis_request(); $_GET = array(); self::init_get(); } public static function init_handle() { spl_autoload_register(array('core', 'autoload_handle')); set_exception_handler(array('core', 'exception_handle')); set_error_handler(array('core', 'error_handle')); } public static function autoload_handle($classname) { $libclasses = ' check, log, form, utf8, image, template, '; if(substr($classname, 0, 3) == 'db_') { include FRAMEWORK_PATH.'db/'.$classname.'.class.php'; return class_exists($classname, false); } elseif(substr($classname, 0, 6) == 'cache_') { include FRAMEWORK_PATH.'cache/'.$classname.'.class.php'; return class_exists($classname, false); } elseif(strpos($libclasses, ' '.$classname.', ') !== FALSE || substr($classname, 0, 3) == 'xn_') { include FRAMEWORK_PATH.'lib/'.$classname.'.class.php'; return class_exists($classname, false); } else { global $conf; if(!class_exists($classname)) { $modelfile = core::model_file($conf, $classname); if($modelfile && is_file($modelfile)) { include_once $modelfile; } } if(!class_exists($classname, false)) { throw new Exception('class '.$classname.' does not exists.'); } } return true; } public static function exception_handle($e) { DEBUG && $_SERVER['exception'] = 1; core::ob_clean(); log::write($e->getMessage().' File: '.$e->getFile().' ['.$e->getLine().']'); $s = ''; if(DEBUG) { try { if(self::gpc('ajax', 'R')) { $s = xn_exception::to_json($e); } else { $s = xn_exception::to_html($e); } } catch (Exception $e) { $s = get_class($e)." thrown within the exception handler. Message: ".$e->getMessage()." on line ".$e->getLine(); } } else { if(self::gpc('ajax', 'R')) { $s = core::json_encode(array('servererror'=>$e->getMessage())); } else { $s = $e->getMessage(); } } echo $s; exit; } public static function error_handle($errno, $errstr, $errfile, $errline) { $errortype = array ( E_ERROR => 'Error', E_WARNING => 'Warning', E_PARSE => 'Parsing Error', E_NOTICE => 'Notice', E_CORE_ERROR => 'Core Error', E_CORE_WARNING => 'Core Warning', E_COMPILE_ERROR => 'Compile Error', E_COMPILE_WARNING => 'Compile Warning', E_USER_ERROR => 'User Error', E_USER_WARNING => 'User Warning', E_USER_NOTICE => 'User Notice', E_STRICT => 'Runtime Notice', ); $errnostr = isset($errortype[$errno]) ? $errortype[$errno] : 'Unknonw'; $s = "[$errnostr] : $errstr in File $errfile, Line: $errline"; if(DEBUG && empty($_SERVER['exception'])) { throw new Exception($s); } else { log::write($s); if(self::gpc('ajax', 'R')) { core::ob_clean(); if($errno != E_NOTICE && $errno != E_USER_ERROR && $errno != E_USER_NOTICE && $errno != E_USER_WARNING) { $s = self::json_encode(array('servererror'=>$s)); throw new Exception($s); exit; } else { $_SERVER['notice_error'] .= $s; } } else { } } return 0; } private static function fix_iis_request() { if(isset($_SERVER['HTTP_X_REWRITE_URL'])) { $_SERVER['REQUEST_URI'] = &$_SERVER['HTTP_X_REWRITE_URL']; } else if(isset($_SERVER['HTTP_REQUEST_URI'])) { $_SERVER['REQUEST_URI'] = &$_SERVER['HTTP_REQUEST_URI']; } else { if(isset($_SERVER['SCRIPT_NAME'])) { $_SERVER['HTTP_REQUEST_URI'] = $_SERVER['SCRIPT_NAME']; } else { $_SERVER['HTTP_REQUEST_URI'] = $_SERVER['PHP_SELF']; } if(isset($_SERVER['QUERY_STRING'])) { $_SERVER['REQUEST_URI'] = '?' . $_SERVER['QUERY_STRING']; } else { $_SERVER['REQUEST_URI'] = ''; } } } private static function init_get() { $r = $_SERVER['REQUEST_URI']; if(strrpos($r, '_htm') !== FALSE) { $r = str_replace('_htm', '.htm', $r); } $get = &$_GET; $query_string = core::gpc('QUERY_STRING', 'S'); parse_str($query_string, $get); $r = substr($r, strrpos($r, '/') + 1); strtolower(substr($r, 0, 9)) == 'index.php' && $r = substr($r, 9); substr($r, 0, 1) == '?' && $r = substr($r, 1); $r = str_replace('.htm&', '?', $r); $r = str_replace('.htm?', '?', $r); $sep = strpos($r, '?'); $s1 = $s2 = ''; if($sep !== FALSE) { $s1 = substr($r, 0, $sep); $s2 = substr($r, $sep + 1); } else { $s1 = $r; $s2 = ''; if(substr($s1, -4) == '.htm') { $s1 = substr($s1, 0, -4); } else { $s2 = $s1; $s1 = ''; } } $arr1 = $arr2 = array(); $s1 && $arr1 = explode('-', $s1); parse_str($s2, $arr2); $get += $arr1; $get += $arr2; $num = count($arr1); if($num > 2) { for($i=2; $i<$num; $i+=2) { isset($arr1[$i+1]) && $get[$arr1[$i]] = $arr1[$i+1]; } } $get[0] = isset($get[0]) && preg_match("/^\w+$/", $get[0]) ? $get[0] : 'index'; $get[1] = isset($get[1]) && preg_match("/^\w+$/", $get[1]) ? $get[1] : 'index'; } public static function process_hook(&$conf, $hookfile) { $s = ''; $plugins = core::get_enable_plugins($conf); $pluginnames = array_keys($plugins); foreach($pluginnames as $v) { $path = $conf['plugin_path'].$v; if(!is_file($path.'/'.$hookfile)) continue; if(empty($plugins[$v])) continue; $s2 = file_get_contents($path.'/'.$hookfile); $s2 = preg_replace('#^<\?php\s*exit;\?>\s{0,2}#i', '', $s2); if(substr($s2, 0, 5) == '<?php' && substr($s2, -2, 2) == '?>') { $s2 = substr($s2, 5, -2); } $s .= $s2; } core::process_urlrewrite($conf, $s); return $s; } public static function process_hook_callback($matchs) { $s = $matchs[1]; return self::process_hook($_ENV['preg_replace_callback_arg'], $s); } public static function process_urlrewrite(&$conf, &$s) { if($conf['urlrewrite']) { $s = preg_replace('#([\'"])\?(.+?\.htm)#i', '\\1'.$conf['app_url'].'\\2', $s); } else { $s = preg_replace('#([\'"])\?(.+?\.htm)#i', '\\1'.$conf['app_url'].'?\\2', $s); } } public static function process_include(&$conf, &$s) { preg_match_all('#[\r\n]{1,2}\s*include\s+(\w+)\.[\'"]([^;]+)[\'"];#is', $s, $m); if(!empty($m[1])) { foreach($m[1] as $k=>$path) { $realpath = constant($m[1][$k]).$m[2][$k]; $file = 'control_'.basename($m[2][$k]); $tmpfile = $conf['tmp_path'].$file; $tmptmpfile = FRAMEWORK_TMP_TMP_PATH.$file; $s2 = file_get_contents($realpath); $_ENV['preg_replace_callback_arg'] = $conf; $s2 = preg_replace_callback('#\t*\/\/\s*hook\s+([^\s]+)#is', 'core::process_hook_callback', $s2); core::process_urlrewrite($conf, $s2); file_put_contents($tmptmpfile, $s2); $s = str_replace($m[0][$k], "\r\n\tinclude '$tmpfile';", $s); } } return $s; } public static function get_plugins(&$conf, $force = 0) { static $plugins = array(); if(!empty($plugins) && !$force) return $plugins; if(empty($conf['plugin_path'])) return array(); $path = $conf['plugin_path']; if(!is_dir($path)) return array(); $settingfile = $conf['upload_path'].'plugin.json'; $setting = is_file($settingfile) ? (array)core::json_decode(file_get_contents($settingfile)) : array(); $arr = self::get_paths($path); foreach($arr as $v) { $conffile = $path.$v.'/conf.php'; $pconf = is_file($conffile) ? (array)include($conffile) : array(); !isset($pconf['enable']) && $pconf['enable'] = isset($setting[$v]['enable']) ? $setting[$v]['enable'] : 0; !isset($pconf['installed']) && $pconf['installed'] = isset($setting[$v]['installed']) ? $setting[$v]['installed'] : 0; !isset($pconf['pluginid']) && $pconf['pluginid'] = isset($setting[$v]['pluginid']) ? $setting[$v]['pluginid'] : 0; !isset($pconf['rank']) && $pconf['rank'] = isset($setting[$v]['rank']) ? $setting[$v]['rank'] : 100; $plugins[$v] = $pconf; } misc::arrlist_multisort($plugins, 'rank'); return $plugins; } public static function get_enable_plugins(&$conf, $force = 0) { $plugins = core::get_plugins($conf, $force); static $enable_plugins = array(); if(!empty($enable_plugins) && !$force) return $enable_plugins; foreach($plugins as $k=>$plugin) { if(!empty($plugin['installed']) && !empty($plugin['enable'])) { $enable_plugins[$k] = $plugin; } } return $enable_plugins; } public static function get_paths($path, $fullpath = FALSE) { $arr = array(); $df = opendir($path); while($dir = readdir($df)) { if($dir == '.' || $dir == '..' || $dir[0] == '.' || !is_dir($path.$dir)) continue; $arr[] = $fullpath ? $path.$dir.'/' : $dir; } sort($arr); return $arr; } public static function model(&$conf, $model, $primarykey = array(), $maxcol = '') { $modelname = 'model_'.$model.'.class.php'; if(isset($_SERVER['models'][$modelname])) { return $_SERVER['models'][$modelname]; } if(empty($primarykey)) { if(isset($conf['model_map'][$model])) { $arr = $conf['model_map'][$model]; $new = new base_model($conf); $new->table = $arr[0]; $new->primarykey = (array)$arr[1]; $new->maxcol = isset($arr[2]) ? $arr[2] : ''; $_SERVER['models'][$modelname] = $new; return $new; } else { $modelfile = self::model_file($conf, $model); if($modelfile) { include_once $modelfile; $new = new $model($conf); $_SERVER['models'][$modelname] = $new; return $new; } else { throw new Exception("Not found model: $model."); } } } else { $new = new base_model($conf); $new->table = $model; $new->primarykey = (array)$primarykey; $new->maxcol = $maxcol; $_SERVER['models'][$modelname] = $new; return $new; } } public static function model_file($conf, $model) { $modelname = 'model_'.$model.'.class.php'; $modelfile = $conf['tmp_path'].$modelname; if((!is_file($modelfile) || DEBUG > 1) && !IN_SAE) { $orgfile = ''; if(empty($conf['plugin_disable'])) { $plugins = self::get_enable_plugins($conf); $pluginnames = array_keys($plugins); foreach($pluginnames as &$v) { $path = $conf['plugin_path'].$v.'/'; if(is_file($path.$conf['app_id'].'/'."$model.class.php")) { $orgfile = $path.$conf['app_id'].'/'."$model.class.php"; break; } if(is_file($path."$model.class.php")) { $orgfile = $path."$model.class.php"; break; } } } if(empty($orgfile)) { foreach($conf['model_path'] as &$path) { if(is_file($path.$model.'.class.php')) { $orgfile = $path.$model.'.class.php'; break; } } } if(empty($orgfile)) { return FALSE; } $s = file_get_contents($orgfile); $_ENV['preg_replace_callback_arg'] = $conf; $s = preg_replace_callback('#\t*\/\/\s*hook\s+([^\s]+)#is', 'core::process_hook_callback', $s); file_put_contents($modelfile, $s); } return $modelfile; } public static function init_timezone($conf = array()) { if(!empty($conf['timeoffset'])) { $zones = array ( '-12' => 'Kwajalein', '-11' => 'Pacific/Midway', '-10' => 'Pacific/Honolulu', '-9' => 'America/Anchorage', '-8' => 'America/Los_Angeles', '-7' => 'America/Denver', '-6' => 'America/Tegucigalpa', '-5' => 'America/New_York', '-4' => 'America/Halifax', '-3' => 'America/Sao_Paulo', '-2' => 'Atlantic/South_Georgia', '-1' => 'Atlantic/Azores', '0' => 'Europe/Dublin', '+1' => 'Europe/Belgrade', '+2' => 'Europe/Minsk', '+3' => 'Asia/Tehran', '+4' => 'Asia/Muscat', '+5' => 'Asia/Katmandu', '+6' => 'Asia/Rangoon', '+7' => 'Asia/Krasnoyarsk', '+8' => 'Asia/Shanghai', '+9' => 'Australia/Darwin', '+10' => 'Australia/Canberra', '+11' => 'Asia/Magadan', '+12' => 'Pacific/Fiji', '+13' => 'Pacific/Tongatapu', ); if(isset($zones[$conf['timeoffset']])) { date_default_timezone_set($zones[$conf['timeoffset']]); } } } public static function init($conf = array()) { core::init_timezone($conf); core::init_set(); core::init_supevar(); core::init_handle(); if(get_magic_quotes_gpc()) { core::stripslashes($_GET); core::stripslashes($_POST); core::stripslashes($_COOKIE); } if(!core::is_cmd()) { header("Expires: 0"); header("Cache-Control: private, post-check=0, pre-check=0, max-age=0"); header("Pragma: no-cache"); header('Content-Type: text/html; charset=UTF-8'); header('X-Powered-By: XiunoPHP;'); } } public static function run(&$conf) { $control = core::gpc(0); $action = core::gpc(1); $objfile = $conf['tmp_path'].$conf['app_id']."_control_{$control}_control.class.php"; if(!is_file($objfile) || (DEBUG > 0 && !IN_SAE)) { $controlfile = ''; if(empty($conf['plugin_disable'])) { $plugins = core::get_enable_plugins($conf); $pluginnames = array_keys($plugins); foreach($pluginnames as $v) { $path = $conf['plugin_path'].$v.'/'; if(is_file($path.$conf['app_id'].'/'."{$control}_control.class.php")) { $controlfile = $path.$conf['app_id'].'/'."{$control}_control.class.php"; break; } if(is_file($path."{$control}_control.class.php")) { $controlfile = $path."{$control}_control.class.php"; break; } else { $controlfile = ''; } } } if(empty($controlfile)) { $paths = $conf['control_path']; foreach($paths as $path) { $controlfile = $path."{$control}_control.class.php"; if(is_file($controlfile)) { break; } else { $controlfile = ''; } } } if(empty($controlfile)) { throw new Exception("您输入的URL 不合法，{$control} control 不存在。"); } if(!is_file($controlfile)) { throw new Exception("您输入的URL 不合法，{$control} control 不存在。"); } $s = file_get_contents($controlfile); core::process_include($conf, $s); $_ENV['preg_replace_callback_arg'] = $conf; $s = preg_replace_callback('#\t*\/\/\s*hook\s+([^\s]+)#is', 'core::process_hook_callback', $s); core::process_urlrewrite($conf, $s); file_put_contents($objfile, $s); clearstatcache(); } if(include $objfile) { $controlclass = "{$control}_control"; $onaction = "on_$action"; $newcontrol = new $controlclass($conf); if(method_exists($newcontrol, $onaction)) { $newcontrol->$onaction(); } else { throw new Exception("您输入的URL 不合法，$action 方法未实现:"); } } else { throw new Exception("您输入的URL 不合法，{$control} control 不存在。"); } unset($newcontrol, $control, $action); } } ?><?php
 class misc { public static function page($key = 'page') { return max(1, intval(core::gpc($key, 'R'))); } public static function pages($url, $totalnum, $page, $pagesize = 20, $pagename = 'page') { $urladd = ''; if(strpos($url, '.htm') !== FALSE) { list($url, $urladd) = explode('.htm', $url); $urladd = '.htm'.$urladd; $rewritepage = "-$pagename-"; } else { $url .= strpos($url, '?') === FALSE ? '?' : '&'; $rewritepage = "$pagename="; } $totalpage = ceil($totalnum / $pagesize); if($totalpage < 2) return ''; $page = min($totalpage, $page); $shownum = 5; $start = max(1, $page - $shownum); $end = min($totalpage, $page + $shownum); $right = $page + $shownum - $totalpage; $right > 0 && $start = max(1, $start -= $right); $left = $page - $shownum; $left < 0 && $end = min($totalpage, $end -= $left); $s = ''; $page != 1 && $s .= '<a href="'.$url.$rewritepage.($page - 1).$urladd.'">◀</a>'; if($start > 1) $s .= '<a href="'.$url.$rewritepage.'1'.$urladd.'">1 '.($start > 2 ? '... ' : '').'</a>'; for($i=$start; $i<=$end; $i++) { if($i == $page) { $s .= '<a href="'.$url.$rewritepage.$i.$urladd.'" class="checked">'.$i.'</a>'; } else { $s .= '<a href="'.$url.$rewritepage.$i.$urladd.'">'.$i.'</a>'; } } if($end != $totalpage) $s .= '<a href="'.$url.$rewritepage.$totalpage.$urladd.'">'.($totalpage - $end > 1 ? '... ' : '').$totalpage.'</a>'; $page != $totalpage && $s .= '<a href="'.$url.$rewritepage.($page + 1).$urladd.'">▶</a>'; return $s; } public static function simple_pages($url, $totalnum, $page, $pagesize = 20, $pagename = 'page') { $urladd = ''; if(strpos($url, '.htm') !== FALSE) { list($url, $urladd) = explode('.htm', $url); $urladd = '.htm'.$urladd; $rewritepage = "-$pagename-"; } else { $url .= strpos($url, '?') === FALSE ? '?' : '&'; $rewritepage = "$pagename="; } $s = ''; $page > 1 && $s .= '<a href="'.$url.$rewritepage.($page - 1).$urladd.'">上一页</a>'; $totalnum >= $pagesize && $s .= '<a href="'.$url.$rewritepage.($page + 1).$urladd.'">下一页</a>'; return $s; } public static function setcookie($key, $value, $time = 0, $path = '', $domain = '', $httponly = FALSE) { $_COOKIE[$key] = $value; if($value != NULL) { if(version_compare(PHP_VERSION, '5.2.0') >= 0) { setcookie($key, $value, $time, $path, $domain, FALSE, $httponly); } else { setcookie($key, $value, $time, $path, $domain, FALSE); } } else { if(version_compare(PHP_VERSION, '5.2.0') >= 0) { setcookie($key, '', $time, $path, $domain, FALSE, $httponly); } else { setcookie($key, '', $time, $path, $domain, FALSE); } } } public static function form_hash($auth_key) { return substr(md5(substr($_SERVER['time'], 0, -5).$auth_key), 16); } public static function form_submit($auth_key) { $hash = core::gpc('FORM_HASH', 'R'); return $hash == self::form_hash($auth_key); } public static function get_url_path() { $port = core::gpc('SERVER_PORT', 'S'); $host = core::gpc('HTTP_HOST', 'S'); $path = substr(core::gpc('PHP_SELF', 'S'), 0, strrpos(core::gpc('PHP_SELF', 'S'), '/')); $http = (($port == 443) || (isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) != 'off')) ? 'https' : 'http'; return "$http://$host$path/"; } public static function get_script_uri() { $port = core::gpc('SERVER_PORT', 'S'); $host = core::gpc('HTTP_HOST', 'S'); if(isset($_SERVER['HTTP_X_REWRITE_URL'])) { $request_uri = $_SERVER['HTTP_X_REWRITE_URL']; } else { $request_uri = $_SERVER['REQUEST_URI']; } $http = (($port == 443) || (isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) != 'off')) ? 'https' : 'http'; return "$http://$host".$request_uri; } public static function minidate($time) { $sub = $_SERVER['time_today'] - $time; if($sub < 0) { $format = 'H:i'; } else { $format = 'Y-n-j'; } return date($format, $time); } public static function humandate($timestamp) { $seconds = $_SERVER['time'] - $timestamp; if($seconds > 31536000) { return date('Y-n-j', $timestamp); } elseif($seconds > 2592000) { return floor($seconds / 2592000).'月前'; } elseif($seconds > 86400) { return floor($seconds / 86400).'天前'; } elseif($seconds > 3600) { return floor($seconds / 3600).'小时前'; } elseif($seconds > 60) { return floor($seconds / 60).'分钟前'; } else { return $seconds.'秒前'; } } public static function humannumber($num) { $num > 100000 && $num = ceil($num / 10000).'万'; return $num; } public static function humansize($num) { if($num > 1073741824) { return number_format($num / 1073741824, 2, '.', '').'G'; } elseif($num > 1048576) { return number_format($num / 1048576, 2, '.', '').'M'; } elseif($num > 1024) { return number_format($num / 1024, 2, '.', '').'K'; } else { return $num.'B'; } } public static function mid($n, $min, $max) { if($n < $min) return $min; if($n > $max) return $min; return $n; } public static function hexdump($data, $newline = "\n") { static $from = ''; static $to = ''; static $width = 16; static $pad = '.'; if($from === '') { for($i=0; $i <= 0xFF; $i++) { $from .= chr($i); $to .= ($i >= 0x20 && $i <= 0x7E) ? chr($i) : $pad; } } $hex = str_split(bin2hex($data), $width * 2); $chars = str_split(strtr($data, $from, $to), $width); $offset = 0; foreach($hex as $i => $line) { echo sprintf('%6X',$offset).' : '.implode(' ', str_split($line, 2)).' ['.$chars[$i].']'.$newline; $offset += $width; } } public static function array_to_urladd($arr) { $s = ''; foreach((array)$arr as $k=>$v) { $s .= "-$k-".urlencode($v); } return $s; } public static function arrlist_key_values($arrlist, $key, $value) { $return = array(); if($key) { foreach((array)$arrlist as $arr) { $return[$arr[$key]] = $arr[$value]; } } else { foreach((array)$arrlist as $arr) { $return[] = $arr[$value]; } } return $return; } public static function arrlist_values($arrlist, $key) { $return = array(); foreach($arrlist as &$arr) { $return[] = $arr[$key]; } return $return; } public static function arrlist_change_key(&$arrlist, $key) { $return = array(); if(empty($arrlist)) return $return; foreach($arrlist as &$arr) { $return[$arr[$key]] = $arr; } $arrlist = $return; } public static function arrlist_multisort(&$arrlist, $col, $asc = TRUE) { $colarr = array(); foreach($arrlist as $k=>$arr) { $colarr[$k] = $arr[$col]; } $asc = $asc ? SORT_ASC : SORT_DESC; array_multisort($colarr, $asc, $arrlist); return $arrlist; } public static function key_str_merge($haystack, $needle) { $haystack .= ' '.$needle; $arr = explode(' ', $haystack); $arr = array_unique($arr); return trim(implode(' ', $arr)); } public static function key_str_strip($haystack, $needle) { $haystack = " {$haystack} "; $arr = explode(' ', trim($needle)); foreach($arr as $v) { $haystack = str_replace(' '.$v.' ', ' ', $haystack); } return trim($haystack); } public static function in_key_str($needle, $haystack) { return strpos(" {$needle} ", " {$haystack} ") !== FALSE; } public static function safe_str($s, $ext = '') { $ext = preg_quote($ext); $s = preg_replace('#[^'.$ext.'\w\x{4e00}-\x{9fa5}]+#u', '', $s); return $s; } public static function html_space($s) { $s = str_replace('  ', ' &nbsp;', $s); $s = str_replace('  ', ' &nbsp;', $s); $s = str_replace('  ', ' &nbsp;', $s); $s = str_replace("\t", '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ', $s); $s = str_replace("\r\n", "\n", $s); $s = str_replace("\n", "<br />", $s); return $s; } public static function implode($glue1, $glue2, $arr) { $s = ''; foreach($arr as $k=>$v) { $s .= ($s ? $glue2 : '').$k.($v ? $glue1.$v : ''); } return $s; } public static function explode($sep1, $sep2, $s) { $arr = $arr2 = $arr3 = array(); $arr = explode($sep2, $s); foreach($arr as $v) { $arr2 = explode($sep1, $v); $arr3[$arr2[0]] = (isset($arr2[1]) ? $arr2[1] : ''); } return $arr3; } public static function is_robot() { $robots = array('robot', 'spider', 'slurp'); foreach($robots as $robot) { if(strpos(core::gpc('HTTP_USER_AGENT', 'S'), $robot) !== FALSE) { return TRUE; } } return FALSE; } public static function is_writable($file) { try { if(is_file($file)) { if(strpos(strtoupper(PHP_OS), 'WIN') !== FALSE) { $fp = @fopen($file, 'rb+'); @fclose($fp); return (bool)$fp; } else { return is_writable($file); } } elseif(is_dir($file)) { $tmpfile = $file.'/____tmp.tmp'; $n = @file_put_contents($tmpfile, 'a'); if($n > 0) { unlink($tmpfile); return TRUE; } else { return FALSE; } } } catch(Exception $e) { return false; } } public static function https_fetch_url($url, $timeout=30, $post = '', $cookie = '', $deep = 0) { if(substr($url, 0, 5) == 'http:') { return self::fetch_url($url, $timeout, $post, $cookie, $deep); } $w = stream_get_wrappers(); $allow_url_fopen = strtolower(ini_get('allow_url_fopen')); $allow_url_fopen = (empty($allow_url_fopen) || $allow_url_fopen == 'off') ? 0 : 1; if(extension_loaded('openssl') && in_array('https', $w) && $allow_url_fopen) { return file_get_contents($url); } elseif (!function_exists('curl_init')) { throw new Exception('server not installed curl.'); } $ch = curl_init(); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_HEADER, 1); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_USERAGENT, core::gpc('HTTP_USER_AGENT', 'S')); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 1); if($post) { curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $post); } if($cookie) { curl_setopt($ch, CURLOPT_HTTPHEADER, array("Cookie: $cookie")); } (!ini_get('safe_mode') && !ini_get('open_basedir')) && curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1); curl_setopt($ch, CURLOPT_TIMEOUT, $timeout); $data = curl_exec($ch); if(curl_errno($ch)) { throw new Exception('Errno'.curl_error($ch)); } if(!$data) { curl_close($ch); return ''; } list($header, $data) = explode("\r\n\r\n", $data); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); if($http_code == 301 || $http_code == 302) { $matches = array(); preg_match('/Location:(.*?)\n/', $header, $matches); $url = trim(array_pop($matches)); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_HEADER, false); $data = curl_exec($ch); } curl_close($ch); return $data; } public static function fetch_url($url, $timeout = 10, $post = '', $cookie = '', $deep = 0) { if($deep > 5) throw new Exception('超出 fetch_url() 最大递归深度！'); if(substr($url, 0, 5) == 'https') { return self::https_fetch_url($url, $timeout, $post, $cookie, $deep); } $w = stream_get_wrappers(); $allow_url_fopen = strtolower(ini_get('allow_url_fopen')); $allow_url_fopen = (empty($allow_url_fopen) || $allow_url_fopen == 'off') ? 0 : 1; if(function_exists('fsockopen')) { $limit = 2000000; $ip = ''; $return = ''; $matches = parse_url($url); $host = $matches['host']; $path = $matches['path'] ? $matches['path'].(!empty($matches['query']) ? '?'.$matches['query'] : '') : '/'; $port = !empty($matches['port']) ? $matches['port'] : 80; $HTTP_USER_AGENT = core::gpc('$HTTP_USER_AGENT', 'S'); empty($HTTP_USER_AGENT) && $HTTP_USER_AGENT = 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'; if(empty($post)) { $out = "GET $path HTTP/1.0\r\n"; $out .= "Accept: */*\r\n"; $out .= "Accept-Language: zh-cn\r\n"; $out .= "User-Agent: $HTTP_USER_AGENT\r\n"; $out .= "Host: $host\r\n"; $out .= "Connection: Close\r\n"; $out .= "Cookie:$cookie\r\n\r\n"; } else { $out = "POST $path HTTP/1.0\r\n"; $out .= "Accept: */*\r\n"; $out .= "Accept-Language: zh-cn\r\n"; $out .= "User-Agent: $HTTP_USER_AGENT\r\n"; $out .= "Host: $host\r\n"; $out .= 'Content-Length: '.strlen($post)."\r\n"; $out .= "Content-Type: application/x-www-form-urlencoded\r\n"; $out .= "Connection: Close\r\n"; $out .= "Cache-Control: no-cache\r\n"; $out .= "Cookie:$cookie\r\n\r\n"; $out .= $post; } $host == 'localhost' && $ip = '127.0.0.1'; $fp = @fsockopen(($ip ? $ip : $host), $port, $errno, $errstr, $timeout); if(!$fp) { return FALSE; } else { stream_set_blocking($fp, TRUE); stream_set_timeout($fp, $timeout); @fwrite($fp, $out); $status = stream_get_meta_data($fp); if(!$status['timed_out']) { $starttime = time(); while (!feof($fp)) { if(($header = @fgets($fp)) && ($header == "\r\n" || $header == "\n")) { break; } else { if(strtolower(substr($header, 0, 9)) == 'location:') { $location = trim(substr($header, 9)); return self::fetch_url($location, $timeout, $post, $cookie, $deep + 1); } } } $stop = false; while(!feof($fp) && !$stop) { $data = fread($fp, ($limit == 0 || $limit > 8192 ? 8192 : $limit)); $return .= $data; if($limit) { $limit -= strlen($data); $stop = $limit <= 0; } if(time() - $starttime > $timeout) break; } } @fclose($fp); return $return; } } elseif(function_exists('curl_init')) { $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_HEADER, 1); if($post) { curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $post); } if($cookie) { curl_setopt($ch, CURLOPT_HTTPHEADER, array('Cookie', $cookie)); } $data = curl_exec($ch); if(curl_errno($ch)) { throw new Exception('Errno'.curl_error($ch)); } if(!$data) { curl_close($ch); return ''; } list($header, $data) = explode("\r\n\r\n", $data); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); if($http_code == 301 || $http_code == 302) { $matches = array(); preg_match('/Location:(.*?)\n/', $header, $matches); $url = trim(array_pop($matches)); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_HEADER, false); $data = curl_exec($ch); } curl_close($ch); return $data; } elseif($allow_url_fopen && empty($post) && empty($cookie) && in_array('http', $w)) { $opts = array ('http'=>array('method'=>'GET', 'timeout'=>$timeout)); $context = stream_context_create($opts); $html = file_get_contents($url, false, $context); return $html; } else { log::write('fetch_url() failed: '.$url); return FALSE; } } public static function multi_fetch_url($urls) { if(!function_exists('curl_multi_init')) { $data = array(); foreach($urls as $k=>$url) { $data[$k] = self::fetch_url($url); } return $data; } $multi_handle = curl_multi_init(); foreach ($urls as $i => $url) { $conn[$i] = curl_init($url); curl_setopt($conn[$i], CURLOPT_RETURNTRANSFER, 1); $timeout = 3; curl_setopt($conn[$i], CURLOPT_CONNECTTIMEOUT, $timeout); curl_setopt($conn[$i], CURLOPT_FOLLOWLOCATION, 1); curl_multi_add_handle($multi_handle, $conn[$i]); } do { $mrc = curl_multi_exec($multi_handle, $active); } while ($mrc == CURLM_CALL_MULTI_PERFORM); while ($active and $mrc == CURLM_OK) { if (curl_multi_select($multi_handle) != - 1) { do { $mrc = curl_multi_exec($multi_handle, $active); } while ($mrc == CURLM_CALL_MULTI_PERFORM); } } foreach ($urls as $i => $url) { $data[$i] = curl_multi_getcontent($conn[$i]); curl_multi_remove_handle($multi_handle, $conn[$i]); curl_close($conn[$i]); } return $data; } public static function scandir($dir) { if(function_exists('scan_dir')) return scandir($dir); $df = opendir($dir); $arr = array(); while($file = readdir($df)) { if($file == '.' || $file == '..') continue; $arr[] = $file; } closedir($df); return $arr; } public static function rmdir($dir, $keepdir = 0) { if($dir == '/' || $dir == '../') return FALSE; if(!is_dir($dir)) return FALSE; substr($dir, -1, 1) != '/' && $dir .= '/'; $files = self::scandir($dir); foreach($files as $file) { if($file == '.' || $file == '..') continue; $filepath = $dir.$file; if(!is_dir($filepath)) { try {unlink($filepath);} catch (Exception $e) {} } else { self::rmdir($filepath.'/'); } } try {if(!$keepdir) rmdir($dir);} catch (Exception $e) {} return TRUE; } } ?><?php
 class base_control { public $conf = array(); function __construct(&$conf) { $this->conf = &$conf; } public function __get($var) { if($var == 'view') { $this->view = new template($this->conf); return $this->view; } elseif($var == 'db') { $conf = $this->conf; $type = $conf['db']['type']; $dbname = "db_$type"; return new $dbname($conf['db'][$type]); } else { $this->$var = core::model($this->conf, $var); if(!$this->$var) { throw new Exception('Not found model:'.$var); } return $this->$var; } } public function message($msg, $jumpurl = '') { if(core::gpc('ajax')) { $arr = array('servererror'=>'', 'status'=>1, 'message'=>$msg); echo core::json_encode($arr); exit; } else { echo $msg; exit; } } public function __call($method, $args) { throw new Exception('base_control.class.php: Not implement method：'.$method.': ('.var_export($args, 1).')'); } } ?><?php
 class base_model { public $conf = array(); public $old_conf = array(); public $table; public $primarykey = array(); public $maxcol = ''; static $dbinsts = array(); static $cacheinsts = array(); private $unique; function __construct(&$conf) { $this->conf = &$conf; $this->old_conf = array(); } function __get($var) { if($var == 'db') { $this->$var = $this->get_db_instance(); return $this->$var; } elseif($var == 'cache') { $this->$var = $this->get_cache_instance(); return $this->$var; } else { if(!empty($this->old_conf)) { $conf = &$this->old_conf; } else { $conf = &$this->conf; } $this->$var = core::model($conf, $var); if(!$this->$var) { throw new Exception('Not found model:'.$var); } return $this->$var; } } function __call($method, $parms) { throw new Exception("$method does not exists."); } public function get_db_conf($key = '') { return $this->conf['db']; } public function get_db_instance($key = '', $conf = array()) { empty($conf) && $conf = $this->get_db_conf($key); $type = $conf['type']; if(isset($conf[$type])) { $c = $conf[$type]; $master = $c['master']; !isset($master['tablepre']) && $master['tablepre'] = ''; !isset($master['name']) && $master['name'] = ''; $id = $type.'-'.$master['host'].'-'.$master['user'].'-'.$master['password'].'-'.$master['name'].'-'.$master['tablepre']; } else { $c = array(); $id = $type; } if(isset(self::$dbinsts[$id])) { return self::$dbinsts[$id]; } else { $dbname = 'db_'.$type; self::$dbinsts[$id] = new $dbname($c); return self::$dbinsts[$id]; } } public function db_get($key) { return $this->get_db_instance($key)->get($key); } public function db_set($key, $data) { return $this->get_db_instance($key)->set($key, $data); } public function db_update($key, $data) { return $this->get_db_instance($key)->update($key, $data); } public function db_delete($key) { return $this->get_db_instance($key)->delete($key); } public function get_cache_conf($key = '') { return $this->conf['cache']; } public function get_cache_instance($key = '') { $conf = $this->get_cache_conf($key); !isset($conf[$conf['type']]) && $conf[$conf['type']] = array('host'=>'', 'port'=>0); $c = $conf[$conf['type']]; $id = $conf['type'].'-'.$c['host'].'-'.$c['port']; if(isset(self::$cacheinsts[$id])) { return self::$cacheinsts[$id]; } else { $type = $conf['type']; $cachename = 'cache_'.$type; self::$cacheinsts[$id] = new $cachename($conf[$type]); return self::$cacheinsts[$id]; } } public function cache_get($key) { return $this->get_cache_instance($key)->get($key); } public function cache_set($key, $data) { return $this->get_cache_instance($key)->set($key, $data); } public function cache_update($key, $data) { return $this->get_cache_instance($key)->update($key, $data); } public function cache_delete($key) { return $this->get_cache_instance($key)->delete($key); } public function db_cache_get($key) { if($this->conf['cache']['enable']) { $arr = $this->cache_get($key); if(!$arr) { $arrlist = $this->db_get($key); if(is_array($key)) { foreach((array)$arrlist as $k=>$v) { $this->cache_set($k, $v); } } else { $this->cache_set($key, $arrlist); } return $arrlist; } else { foreach($arr as $k=>&$v) { if($v === FALSE) { $v = $this->db_get($k); $this->cache_set($k, $v); } } return $arr; } } else { return $this->db_get($key); } } public function db_cache_set($key, $data, $life = 0) { $this->conf['cache']['enable'] && $this->cache_set($key, $data, $life); return $this->db_set($key, $data); } public function db_cache_update($key, $data) { $this->conf['cache']['enable'] && $this->cache_update($key, $data); return $this->db_update($key, $data); } public function db_cache_delete($key) { $this->conf['cache']['enable'] && $this->cache_delete($key); return $this->db_delete($key); } public function db_cache_truncate() { $this->conf['cache']['enable'] && $this->cache->truncate($this->table); return $this->db->truncate($this->table); } public function db_cache_maxid($val = FALSE) { $key = $this->table.'-'.$this->maxcol; if($this->conf['cache']['enable']) { $this->cache->maxid($key, $val); return $this->db->maxid($key, $val); } else { return $this->db->maxid($key, $val); } } public function db_cache_count($val = FALSE) { $key = $this->table; if($this->conf['cache']['enable']) { $this->cache->count($key, $val); return $this->db->count($key, $val); } else { return $this->db->count($key, $val); } } public function db_cache_index_fetch($table, $keyname, $cond = array(), $orderby = array(), $start = 0, $limit = 10) { if($this->conf['db']['type'] == 'mongodb') { return $this->db->index_fetch($table, $keyname, $cond, $orderby, $start, $limit); } else { if($this->conf['cache']['enable']) { $keynames = $this->db->index_fetch_id($table, $keyname, $cond, $orderby, $start, $limit); return $this->db_cache_get($keynames); } else { return $this->db->index_fetch($table, $keyname, $cond, $orderby, $start, $limit); } } } public function mget($keys) { $arrlist = array(); foreach($keys as $k=>$key) { $key = $this->to_key($key); $keys[$k] = $key; if(isset($this->unique[$key])) { $arrlist[$key] = $this->unique[$key]; unset($keys[$k]); } else { $arrlist[$key] = NULL; $this->unique[$key] = $arrlist[$key]; } } $arrlist2 = $this->db_cache_get($keys); $arrlist = array_merge($arrlist, $arrlist2); return $arrlist; } public function get($key) { $key = $this->to_key($key); if(!isset($this->unique[$key])) { $this->unique[$key] = $this->db_cache_get($key); } return $this->unique[$key]; } public function set($key, $arr, $life = 0) { $key = $this->to_key($key); $this->unique[$key] = $arr; return $this->db_cache_set($key, $arr); } public function create($arr) { if(!empty($this->maxcol)) { if(!isset($arr[$this->maxcol])) { $arr[$this->maxcol] = $this->maxid('+1'); $key = $this->get_key($arr); } else { $key = $this->get_key($arr); $arr2 = $this->db_cache_get($key); if(!empty($arr2)) { return FALSE; } } $this->count('+1'); if($this->db_cache_set($key, $arr)) { return $arr[$this->maxcol]; } else { $this->maxid('-1'); $this->count('-1'); return FALSE; } } else { $key = $this->get_key($arr); $this->db_cache_set($key, $arr); return TRUE; } } public function update($arr) { $key = $this->get_key($arr); $this->unique[$key] = $arr; return $this->db_cache_update($key, $arr); } public function read($key, $arg2 = FALSE, $arg3 = FALSE, $arg4 = FALSE) { $key = (array)$key; $arg2 !== FALSE && array_push($key, $arg2); $arg3 !== FALSE && array_push($key, $arg3); $arg4 !== FALSE && array_push($key, $arg4); $key = $this->to_key($key); return $this->db_cache_get($key); } public function delete($key, $arg2 = FALSE, $arg3 = FALSE, $arg4 = FALSE) { $key = (array)$key; $arg2 !== FALSE && array_push($key, $arg2); $arg3 !== FALSE && array_push($key, $arg3); $arg4 !== FALSE && array_push($key, $arg4); $key = $this->to_key($key); unset($this->unique[$key]); if(!empty($this->maxcol)) { if($this->db_cache_get($key)) { $this->count('-1'); } } return $this->db_cache_delete($key); } public function truncate() { return $this->db_cache_truncate(); } public function maxid($val = FALSE) { if(FRAMEWORK_MAXID_SAFE && is_string($val)) { $lockfile = $this->conf['tmp_path'].$this->conf['app_id'].$this->table.'.maxid.lock'; $fp = fopen($lockfile, 'w+'); $i = 0; while(!flock($fp, LOCK_EX)) { if(++$i > 10) { throw new Exception('Database is too busy, get maxid failed.'); } usleep(20000); } $n = $this->db_cache_maxid($val); fclose($fp); return $n; } else { $n = $this->db_cache_maxid($val); return $n; } } public function count($val = FALSE) { $key = $this->table; return $this->db_cache_count($val); } public function index_fetch($cond = array(), $orderby = array(), $start = 0, $limit = 10) { return (array)$this->db_cache_index_fetch($this->table, $this->primarykey, $cond, $orderby, $start, $limit); } public function index_fetch_id($cond = array(), $orderby = array(), $start = 0, $limit = 10) { return (array)$this->db->index_fetch_id($this->table, $this->primarykey, $cond, $orderby, $start, $limit); } public function index_update($cond, $update, $lowprority = FALSE) { $n = $this->index_count($cond); $m = 0; if(!empty($this->conf['cache']['enable'])) { if($n > 2000) { $this->unique = array(); $this->cache->truncate($this->table); $m = $this->db->index_update($this->table, $cond, $update, $lowprority); } else { $keys = $this->index_fetch_id($cond); foreach($keys as $key) { unset($this->unique[$key]); $this->cache_delete($key); } $m = $this->db->index_update($this->table, $cond, $update, $lowprority); } } else { $this->unique = array(); $m = $this->db->index_update($this->table, $cond, $update, $lowprority); } $n = $m ? $m : $n; return $n; } public function index_delete($cond, $lowprority = FALSE) { $n = $this->index_count($cond); $m = 0; if($n == 0) return 0; if(!empty($this->conf['cache']['enable'])) { if($n > 2000) { $this->unique = array(); $this->cache->truncate($this->table); $m = $this->db->index_delete($this->table, $cond, $lowprority); } else { $keys = $this->index_fetch_id($cond); foreach($keys as $key) { unset($this->unique[$key]); $this->db_cache_delete($key); } $m = $this->db->index_delete($this->table, $cond, $lowprority); } } else { $this->unique = array(); $m = $this->db->index_delete($this->table, $cond, $lowprority); } $n = $m ? $m : $n; if($n > 0 && !empty($this->maxcol)) { $this->count('-'.$n); } return $n; } public function index_maxid() { return isset($this->maxcol) ? $this->db->index_maxid($this->table.'-'.$this->maxcol) : 0; } public function index_count($cond = array()) { return $this->db->index_count($this->table, $cond); } public function index_create($index) { $this->db->index_create($this->table, $index); } public function index_drop($index) { $this->db->index_drop($this->table, $index); } public function get_key($arr) { $s = $this->table; foreach($this->primarykey as $v) { $s .= "-$v-".$arr[$v]; } return $s; } public function to_key($key) { $s = $this->table; foreach((array)$key as $k=>$v) { $s .= '-'.$this->primarykey[$k].'-'.$v; } return $s; } } ?><?php
 if(!isset($_SERVER['time'])) { $_SERVER['time'] = time(); $_SERVER['time_fmt'] = gmdate('y-n-j H:i', time() + 8 * 3600); } class log { public static function write($s, $file = 'phperror.php') { $s = self::safe_str($s); $ip = $_SERVER['ip']; $time = $_SERVER['time_fmt']; $url = $_SERVER['REQUEST_URI']; $url = self::safe_str($url); $s = '<?php exit;?>'."	$time	$ip	$url	$s	\r\n"; self::real_write($s, $file); return TRUE; } public static function real_write($s, $file = 'phperror.php') { if(IN_SAE) { sae_set_display_errors(false); sae_debug($s); return TRUE; } $logpath = FRAMEWORK_LOG_PATH; $logfile = $logpath.$file; try { $fp = fopen($logfile, 'ab+'); if(!$fp) { throw new Exception('写入日志失败，可能磁盘已满，或者文件'.$logfile.'不可写。'); } fwrite($fp, $s); fclose($fp); } catch (Exception $e) {} return TRUE; } public static function safe_str($s) { $s = str_replace("\r\n", ' ', $s); $s = str_replace("\r", ' ', $s); $s = str_replace("\n", ' ', $s); $s = str_replace("\t", ' ', $s); return $s; } public static function trace($s) { if(!DEBUG) return; $processtime = number_format(microtime(1) - $_SERVER['time'], 3, '.', ''); empty($_SERVER['trace']) && $_SERVER['trace'] = ''; $_SERVER['trace'] .= "$s - $processtime\r\n"; } public static function trace_save() { $s = "\r\n\r\n---------------------------------------------------------------------------------\r\n<?php exit;?>\r\n---------------------------------------------------------------------------------\r\n$_SERVER[REQUEST_URI]\r\nPOST:".print_r($_POST, 1)."\r\nSQL:".print_r($_SERVER['sqls'], 1)."\r\n"; $s .= $_SERVER['trace']; self::real_write($s, 'trace.php'); } } ?><?php
 if(empty($_SERVER['ip'])) { $_SERVER['ip'] = core::gpc('REMOTE_ADDR', 'S'); } if(empty($_SERVER['time'])) { $_SERVER['time'] = time(); } class xn_exception { public static function format_exception($e) { $trace = $e->getTrace(); if(!empty($trace) && $trace[0]['function'] == 'error_handle' && $trace[0]['class'] == 'core') { $line = $trace[0]['args'][3]; $file = $trace[0]['args'][2]; $message = $trace[0]['args'][1]; } else { $line = $e->getLine(); $file = $e->getFile(); $message = $e->getMessage(); } $backtracelist = array(); foreach($trace as $k=>$v) { $args = $comma = ''; if(!empty($v['args'])) { if(DEBUG > 1) { if($v['function'] == 'error_handle') { $v['class'] = ''; $v['function'] = ''; $args = ''; } else { foreach((array)$v['args'] as $arg) { if(is_string($arg)) { $args .= $comma."'$arg'"; } elseif(is_object($arg)) { $args .= $comma."Object"; } elseif(is_array($arg)) { if(!isset($arg['db'])) { $arg = print_r($arg, 1); } else { $arg = '$conf'; } $args .= $comma.$arg; } else { $args .= $comma.''.($arg === NULL ? 'NULL' : $arg); } $comma = ', '; } } } else { $args = ''; } } !isset($v['file']) && $v['file'] = ''; !isset($v['line']) && $v['line'] = ''; !isset($v['function']) && $v['function'] = ''; !isset($v['class']) && $v['class'] = ''; !isset($v['type']) && $v['type'] = ''; $backtracelist[] = array ( 'file'=>$v['file'], 'line'=>$v['line'], 'function'=>$v['function'], 'class'=>$v['class'], 'type'=>$v['type'], 'args'=>$args, ); } $codelist = self::get_code($file, $line); return array( 'line'=>$line, 'file'=>$file, 'codelist'=>$codelist, 'message'=>$message, 'backtracelist'=>$backtracelist, ); } public static function get_code($file, $line) { $arr = file($file); $arr2 = array_slice($arr, max(0, $line - 5), 10, true); if(!core::is_cmd()) { foreach ($arr2 as &$v) { $v = htmlspecialchars($v); $v = str_replace(' ', '&nbsp;', $v); $v = str_replace('	', '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;', $v); } } return $arr2; } public static function to_text($e) { return self::to_string(); } public static function to_html($e) { return self::to_string($e); } public static function to_string($e) { if(is_object($e)) { $arr = self::format_exception($e); $line = $arr['line']; $file = $arr['file']; $codelist = $arr['codelist']; $message = $arr['message']; $backtracelist = $arr['backtracelist']; ob_start(); if(core::is_cmd()) { include FRAMEWORK_PATH.'errorpage/exception_cmd.htm'; } else { include FRAMEWORK_PATH.'errorpage/exception.htm'; } $s = ob_get_contents(); ob_end_clean(); return $s; } elseif(is_string($e)) { return $e; } } public static function to_json($e) { if(DEBUG) { $arr = self::format_exception($e); $backinfo = ''; foreach($arr['backtracelist'] as $v) { $backinfo .= "$v[file] [$v[line]] : $v[class]$v[type]$v[function]($v[args])\r\n"; } $s = "$arr[message]\r\n File: $arr[file] [$arr[line]] \r\n \r\n $backinfo"; $s = str_replace(array('&nbsp;', '<br />', '&gt;', '&lt;'), array(' ', "\r\n", '>', '<'), $s); $s = preg_replace('#[\r\n]+#', "\n", $s); } else { $s = $e->getMessage(); } $s = preg_replace('# \S*[/\\\\](.+?\.php)#', ' \\1', $s); $arr = array('servererror' => $s); return core::json_encode($arr); } } ?><?php
 function long2str($v, $w) { $len = count($v); $n = ($len - 1) << 2; if ($w) { $m = $v[$len - 1]; if (($m < $n - 3) || ($m > $n)) return false; $n = $m; } $s = array(); for ($i = 0; $i < $len; $i++) { $s[$i] = pack("V", $v[$i]); } if ($w) { return substr(join('', $s), 0, $n); } else { return join('', $s); } } function str2long($s, $w) { $v = unpack("V*", $s. str_repeat("\0", (4 - strlen($s) % 4) & 3)); $v = array_values($v); if ($w) { $v[count($v)] = strlen($s); } return $v; } function int32($n) { while ($n >= 2147483648) $n -= 4294967296; while ($n <= -2147483649) $n += 4294967296; return (int)$n; } function xxtea_encrypt($str, $key) { if ($str == "") { return ""; } $v = str2long($str, true); $k = str2long($key, false); if (count($k) < 4) { for ($i = count($k); $i < 4; $i++) { $k[$i] = 0; } } $n = count($v) - 1; $z = $v[$n]; $y = $v[0]; $delta = 0x9E3779B9; $q = floor(6 + 52 / ($n + 1)); $sum = 0; while (0 < $q--) { $sum = int32($sum + $delta); $e = $sum >> 2 & 3; for ($p = 0; $p < $n; $p++) { $y = $v[$p + 1]; $mx = int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z)); $z = $v[$p] = int32($v[$p] + $mx); } $y = $v[0]; $mx = int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z)); $z = $v[$n] = int32($v[$n] + $mx); } return long2str($v, false); } function xxtea_decrypt($str, $key) { if ($str == "") { return ""; } $v = str2long($str, false); $k = str2long($key, false); if (count($k) < 4) { for ($i = count($k); $i < 4; $i++) { $k[$i] = 0; } } $n = count($v) - 1; $z = $v[$n]; $y = $v[0]; $delta = 0x9E3779B9; $q = floor(6 + 52 / ($n + 1)); $sum = int32($q * $delta); while ($sum != 0) { $e = $sum >> 2 & 3; for ($p = $n; $p > 0; $p--) { $z = $v[$p - 1]; $mx = int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z)); $y = $v[$p] = int32($v[$p] - $mx); } $z = $v[$n]; $mx = int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z)); $y = $v[0] = int32($v[0] - $mx); $sum = int32($sum - $delta); } return long2str($v, true); } function encrypt($txt, $key = 'abcd9667676effff') { $s = urlencode(base64_encode(xxtea_encrypt($txt, $key))); $s = str_replace('%2F', '%252F', $s); return $s; } function decrypt($txt, $key = 'abcd9667676effff') { $txt = str_replace('%252F', '%2F', $txt); return xxtea_decrypt(base64_decode(urldecode($txt)), $key); } ?><?php
 class template { private $vars = array(); private $force = 1; private $var_regexp = "\@?\\\$[a-zA-Z_]\w*(?:\[[\w\.\"\'\$]+\])*"; private $vtag_regexp = "\<\?=(\@?\\\$[a-zA-Z_]\w*(?:\[[\w\.\"\'\[\]\$]+\])*)\?\>"; private $const_regexp = "\{([\w]+)\}"; public $conf = array(); public $json = array(); function __construct(&$conf) { $this->conf = &$conf; } public function assign($k, &$v) { $this->vars[$k] = &$v; } public function assign_value($k, $v) { $this->vars[$k] = $v; } public function display($file, $json = array()) { if(!core::gpc('ajax', 'R')) { extract($this->vars, EXTR_SKIP); include $this->gettpl($file); } else { ob_start(); extract($this->vars, EXTR_SKIP); include $this->gettpl($file); $body = ob_get_contents(); ob_end_clean(); $json = array('servererror'=>'', 'status'=>1, 'message'=>array('width'=>400, 'height'=>300, 'pos'=>'center', 'title'=>'默认窗口标题', 'body'=>'')); $json['message'] = array_merge($json['message'], $this->json); $this->fetch_json_header($body, $json['message']); $json['message']['body'] = $body; echo core::json_encode($json); } } public function gettpl($filename) { $objfile = $this->conf['tmp_path'].$this->conf['app_id'].'_view_'.$filename.'.php'; if(!$this->force) return $objfile; if(!is_file($objfile) || DEBUG > 0 && !IN_SAE) { $file = ''; if(!empty($this->conf['first_view_path'])) { foreach($this->conf['first_view_path'] as $path) { if(is_file($path.$filename)) { $file = $path.$filename; break; } } } if(empty($file) && empty($this->conf['plugin_disable'])) { $plugins = core::get_enable_plugins($this->conf); $pluginnames = array_keys($plugins); foreach($pluginnames as $v) { $path = $this->conf['plugin_path'].$v.'/'; if(is_file($path.$this->conf['app_id'].'/'.$filename)) { $file = $path.$this->conf['app_id'].'/'.$filename; break; } if(is_file($path.$filename)) { $file = $path.$filename; break; } } } if(empty($file)) { foreach($this->conf['view_path'] as $path) { if(is_file($path.$filename)) { $file = $path.$filename; break; } } } if(empty($file)) { throw new Exception("模板文件 $filename 不存在。"); } $filemtime = filemtime($file); if(!$filemtime) { throw new Exception("模板文件 $filename 最后更新时间读取失败。"); } $filemtimeold = is_file($objfile) ? filemtime($objfile) : 0; if($filemtimeold < $filemtime || DEBUG > 1) { $s = $this->complie($file); file_put_contents($objfile, $s); } } return $objfile; } public function complie($viewfile) { $conf = $this->conf; $s = file_get_contents($viewfile); $s = preg_replace("/<!--\{(.+?)\}-->/s", "{\\1}", $s); for($i = 0; $i < 4; $i++) { if(DEBUG > 0) { $s = preg_replace("/<!--\{(.+?)\}-->/s", "{\\1}", $s); $s = preg_replace('#\{require\s+([^}]*?)\}#is', "{include \\1}", $s); } else { $s = preg_replace("/<!--\{(.+?)\}-->/s", "{\\1}", $s); $s = preg_replace('#\{include\s+([^}]*?)\}#is', "{require \\1}", $s); $s = preg_replace_callback('#\{require\s+([^}]*?)\}#is', array($this, 'requiretpl'), $s); } $s = preg_replace("/<!--\{(.+?)\}-->/s", "{\\1}", $s); $s = preg_replace_callback('#\{hook\s+([^}]+)\}#is', array($this, 'process_hook'), $s); $s = preg_replace_callback('#\t*//\s*hook\s+([^\s]+)#is', array($this, 'process_hook'), $s); } !empty($this->conf['view_convert_button']) && $s = $this->convert_button($s); $s = preg_replace("/($this->var_regexp|\{$this->var_regexp\})/", "<?=\\1?>", $s); $s = preg_replace("/\<\?=\{(.+?)\}\?\>/", "<?=\\1?>", $s); $s = preg_replace("/\{($this->const_regexp)\}/", "<?=\\1?>", $s); $s = preg_replace_callback("/\<\?=(\@?\\\$[a-zA-Z_]\w*)((\[[^\]]+\])+)\?\>/is", array($this, 'arrayindex'), $s); $s = preg_replace('#([\'"])(view\w*)/#i', '\\1'.$this->conf['static_url'].'\\2/', $s); $s = preg_replace('#([\'"])(plugin/view\w*)/#i', '\\1'.$this->conf['static_url'].'\\2/', $s); $s = preg_replace('#\{include\s+([^}]*?)\}#is', "<?php include \$this->gettpl('\\1');?>", $s); $isset = '<\?php echo isset(?:+*?) ? (?:+*?) : ;\?>'; $s = preg_replace_callback("/\{\{php (.*?)\}\}/is", array($this, 'stripvtag_callback'), $s); $s = preg_replace_callback("/\{php (.*?)\}/is", array($this, 'stripvtag_callback'), $s); $s = preg_replace_callback("/\{for (.*?)\}/is", array($this, 'stripvtag_callback'), $s); $s = preg_replace_callback("/\{elseif\s+(.+?)\}/is", array($this, 'stripvtag_callback'), $s); for($i=0; $i<4; $i++) { $s = preg_replace_callback("/\{loop\s+$this->vtag_regexp\s+$this->vtag_regexp\s+$this->vtag_regexp\}(.+?)\{\/loop\}/is", array($this, 'loopsection'), $s); $s = preg_replace_callback("/\{loop\s+$this->vtag_regexp\s+$this->vtag_regexp\}(.+?)\{\/loop\}/is", array($this, 'loopsection'), $s); } $s = preg_replace_callback("/\{if\s+(.+?)\}/is", array($this, 'stripvtag_callback'), $s); $s = preg_replace("/\{else\}/is", "<? } else { ?>", $s); $s = preg_replace("/\{\/if\}/is", "<? } ?>", $s); $s = preg_replace("/\{\/for\}/is", "<? } ?>", $s); $s = preg_replace("/$this->const_regexp/", "<?=\\1?>", $s); $s = preg_replace_callback("/\<\?=\@(\\\$[a-zA-Z_]\w*)((\[[\\$\[\]\w\']+\])+)\?\>/is", array($this, 'array_keyexists'), $s); $s = "<? !defined('FRAMEWORK_PATH') && exit('Access Denied');?>$s"; $s = preg_replace('#<\?=(\w+.*?)\?>#', "<?php echo \\1;?>", $s); $s = preg_replace('#<\?=(\$\w+.*?)\?>#', "<?php echo isset(\\1) ? \\1 : '';?>", $s); $s = preg_replace('#<\? (.*?)\?>#', "<?php \\1?>", $s); $s = preg_replace('#\{json (.*?)\}#', '<!--{json \\1}-->', $s); if($this->conf['urlrewrite']) { $s = preg_replace('#([\'"])\?(.+?\.htm)#i', '\\1'.$this->conf['app_url'].'\\2', $s); } else { $s = preg_replace('#([\'"])\?(.+?\.htm)#i', '\\1'.$this->conf['app_url'].'?\\2', $s); } return $s; } public function requiretpl($matchs) { $filename = $matchs[1]; $file = ''; if(!empty($this->conf['first_view_path'])) { foreach($this->conf['first_view_path'] as $path) { if(is_file($path.$filename)) { $file = $path.$filename; break; } } } if(empty($file)) { $plugins = core::get_enable_plugins($this->conf); $pluginnames = array_keys($plugins); foreach($pluginnames as $v) { $path = $this->conf['plugin_path'].$v.'/'; if(is_file($path.$filename)) { $file = $path.$filename; break; } } } if(empty($file)) { foreach($this->conf['view_path'] as $path) { if(is_file($path.$filename)) { $file = $path.$filename; break; } } } if(empty($file)) { throw new Exception("require 模板文件 $filename 不存在。"); } return file_get_contents($file); } private function process_hook($matchs) { $hookfile = $matchs[1]; $s = core::process_hook($this->conf, $hookfile); return $s; } private function arrayindex($matchs) { $name = $matchs[1]; $items = $matchs[2]; if(strpos($items, '$') === FALSE) { $items = preg_replace("/\[([\$a-zA-Z_][\w\$]*)\]/is", "['\\1']", $items); } else { $items = preg_replace("/\[([\$a-zA-Z_][\w\$]*)\]/is", "[\"\\1\"]", $items); } return "<?=$name$items?>"; } private function array_keyexists($name, $items) { return "<?php echo isset($name$items)?$name$items:'';?>"; } private function stripvtag_callback($matchs) { $arr = explode(' ', $matchs[0]); $pre = $arr[0]; $s = $matchs[1]; if($pre == '{for') { $s = '<? for('.$s.') {?>'; } elseif($pre == '{php') { $s = '<? '.$s.'?>'; } elseif($pre == '{elseif') { $s = '<? } elseif('.$s.') { ?>'; } elseif($pre == '{if') { $s = '<? if('.$s.') { ?>'; } return $this->stripvtag($s); } private function stripvtag($s, $instring = FALSE) { $s = preg_replace('#<\?php echo isset\((.*?)\) \? (\\1) : \'\';\?>#', $instring ? '{\\1}' : '\\1', $s); return preg_replace("/$this->vtag_regexp/is", "\\1", str_replace("\\\"", '"', $s)); } private function fetch_json_header(&$s, &$arr) { preg_match('#<!--\{json (.*?)\}-->#', $s, $m); if(isset($m[1])) { preg_match_all('#(\w+):"(.*?)"#', $m[1], $m2); foreach($m2[1] as $k=>$v) { $arr[$m2[1][$k]] = $m2[2][$k]; } $s = preg_replace('#<!--\{json (.*?)\}-->#', '', $s); } return $arr; } private function loopsection($matchs) { if(isset($matchs[4])) { $arr = $matchs[1]; $k = $matchs[2]; $v = $matchs[3]; $statement = $matchs[4]; } else { $arr = $matchs[1]; $k = ''; $v = $matchs[2]; $statement = $matchs[3]; } $arr = $this->stripvtag($arr); $k = $this->stripvtag($k); $v = $this->stripvtag($v); $statement = str_replace("\\\"", '"', $statement); return $k ? "<? if(!empty($arr)) { foreach($arr as $k=>&$v) {?>$statement<? }}?>" : "<? if(!empty($arr)) { foreach($arr as &$v) {?>$statement<? }} ?>"; } private function convert_button($s) { $r = ''; $p = '#<input ([^<]*?)>#is'; $offset = 0; while(preg_match($p, $s, $m, PREG_OFFSET_CAPTURE)) { $start = $m[0][1]; $len = strlen($m[0][0]); preg_match_all('#(\w+)\s*=\s*"(.*?)"#', $m[1][0], $m2); if(!empty($m2[1]) && !empty($m2[2])) { $arr = array_combine($m2[1], $m2[2]); } else { $arr = array(); } $offset = $len + $start; if(!isset($arr['class']) || strpos($arr['class'], 'button') === FALSE) { $r .= substr($s, 0, $offset); $s = substr($s, $offset); continue; } $value = $arr['value']; $attrs = ''; !isset($arr['href']) && $arr['href'] = 'javascript:void(0)'; !isset($arr['role']) && $arr['role'] = 'button'; foreach($arr as $k=>$v) { $k == 'onclick' && stripos($v, 'return false') === FALSE && $v .= ";return false;"; $attrs .= " $k=\"$v\""; } $r .= substr($s, 0, $start)."<a$attrs><span>$value</span></a>"; $s = substr($s, $offset); } $r .= $s; return $r; } } ?><?php
 if(!defined('FRAMEWORK_PATH')) { exit('FRAMEWORK_PATH not defined.'); } interface db_interface { public function __construct($conf); public function get($key); public function set($key, $data); public function update($key, $arr); public function delete($key); public function maxid($table, $val = 0); public function count($table, $val = 0); public function truncate($table); public function version(); public function index_fetch($table, $keyname, $cond = array(), $orderby = array(), $start = 0, $limit = 0); public function index_fetch_id($table, $keyname, $cond = array(), $orderby = array(), $start = 0, $limit = 0); public function index_update($table, $cond, $update, $lowprority = FALSE); public function index_delete($table, $cond, $lowprority = FALSE); public function index_maxid($key); public function index_count($table, $cond = array()); public function index_create($table, $index); public function index_drop($table, $index); public function table_create($table, $cols, $engineer = ''); public function table_drop($table); public function table_column_add($table, $colname, $colattr); public function table_column_drop($table, $colname); } ?><?php
 if(!defined('FRAMEWORK_PATH')) { exit('FRAMEWORK_PATH not defined.'); } class db_mysql implements db_interface { private $conf; public $tablepre; public function __construct($conf) { $this->conf = $conf; $this->tablepre = $this->conf['master']['tablepre']; } public function __get($var) { $conf = $this->conf; if($var == 'rlink') { if(empty($this->conf['slaves'])) { $this->rlink = $this->wlink; return $this->rlink; } $n = rand(0, count($this->conf['slaves']) - 1); $conf = $this->conf['slaves'][$n]; empty($conf['engine']) && $conf['engine'] = ''; $this->rlink = $this->connect($conf['host'], $conf['user'], $conf['password'], $conf['name'], $conf['charset'], $conf['engine']); return $this->rlink; } elseif($var == 'wlink') { $conf = $this->conf['master']; empty($conf['engine']) && $conf['engine'] = ''; $this->wlink = $this->connect($conf['host'], $conf['user'], $conf['password'], $conf['name'], $conf['charset'], $conf['engine']); return $this->wlink; } elseif($var == 'xlink') { if(empty($this->conf['arbiter'])) { $this->xlink = $this->wlink; return $this->xlink; } $conf = $this->conf['arbiter']; empty($conf['engine']) && $conf['engine'] = ''; $this->xlink = $this->connect($conf['host'], $conf['user'], $conf['password'], $conf['name'], $conf['charset'], $conf['engine']); return $this->xlink; } } public function get($key) { if(!is_array($key)) { list($table, $keyarr, $sqladd) = $this->parse_key($key); $tablename = $this->tablepre.$table; $result = $this->query("SELECT * FROM $tablename WHERE $sqladd LIMIT 1", $this->rlink); $arr = mysql_fetch_assoc($result); return $arr; } else { $sqladd = $_sqladd = $table = $tablename = ''; $data = $return = $keyarr = array(); $keys = $key; foreach($keys as $key) { $return[$key] = array(); list($table, $keyarr, $_sqladd) = $this->parse_key($key); $tablename = $this->tablepre.$table; $sqladd .= "$_sqladd OR "; } $sqladd = substr($sqladd, 0, -4); if($sqladd) { $result = $this->query("SELECT * FROM $tablename WHERE $sqladd", $this->rlink); while($data = mysql_fetch_assoc($result)) { $keyname = $table; foreach($keyarr as $k=>$v) { $keyname .= "-$k-".$data[$k]; } $return[$keyname] = $data; } } return $return; } } public function set($key, $data) { list($table, $keyarr, $sqladd) = $this->parse_key($key); $tablename = $this->tablepre.$table; if(is_array($data)) { $data += $keyarr; $s = $this->arr_to_sqladd($data); $exists = $this->get($key); if(empty($exists)) { return $this->query("INSERT INTO $tablename SET $s", $this->wlink); } else { return $this->update($key, $data); } } else { return FALSE; } } public function update($key, $data) { list($table, $keyarr, $sqladd) = $this->parse_key($key); $tablename = $this->tablepre.$table; $s = $this->arr_to_sqladd($data); return $this->query("UPDATE $tablename SET $s WHERE $sqladd LIMIT 1", $this->wlink); } public function delete($key) { list($table, $keyarr, $sqladd) = $this->parse_key($key); $tablename = $this->tablepre.$table; return $this->query("DELETE FROM $tablename WHERE $sqladd LIMIT 1", $this->wlink); } public function maxid($key, $val = FALSE) { list($table, $col) = explode('-', $key.'-'); $maxid = $this->table_maxid($key); if($val === FALSE) { return $maxid; } elseif(is_string($val) && $val{0} == '+') { $val = intval($val); $this->query("UPDATE {$this->tablepre}framework_maxid SET maxid=maxid+'$val' WHERE name='$table' LIMIT 1", $this->xlink); return $maxid += $val; } else { $this->query("UPDATE {$this->tablepre}framework_maxid SET maxid='$val' WHERE name='$table' LIMIT 1", $this->xlink); return $val; } } public function count($key, $val = FALSE) { $count = $this->table_count($key); if($val === FALSE) { return $count; } elseif(is_string($val)) { $count = $this->table_count($key); if($val{0} == '+') { $val = $count + abs(intval($val)); $this->query("UPDATE {$this->tablepre}framework_count SET count = '$val' WHERE name='$key' LIMIT 1", $this->xlink); return $val; } else { $val = max(0, $count - abs(intval($val))); $this->query("UPDATE {$this->tablepre}framework_count SET count = '$val' WHERE name='$key' LIMIT 1", $this->xlink); return $val; } } else { $arr = $this->fetch_first("SELECT * FROM {$this->tablepre}framework_count WHERE name='$key' LIMIT 1", $this->xlink); if(empty($arr)) { $this->query("INSERT INTO {$this->tablepre}framework_count SET name='$key', count='$val'", $this->xlink); } else { $this->query("UPDATE {$this->tablepre}framework_count SET count='$val' WHERE name='$key' LIMIT 1", $this->xlink); } return $val; } } public function truncate($table) { $table = $this->tablepre.$table; try { $this->query("TRUNCATE $table"); return TRUE; } catch(Exception $e) { return FALSE; } } public function index_fetch($table, $keyname, $cond = array(), $orderby = array(), $start = 0, $limit = 0) { $keynames = $this->index_fetch_id($table, $keyname, $cond, $orderby, $start, $limit); if(!empty($keynames)) { return $this->get($keynames); } else { return array(); } } public function index_fetch_id($table, $keyname, $cond = array(), $orderby = array(), $start = 0, $limit = 0) { $tablename = $this->tablepre.$table; $keyname = (array)$keyname; $sqladd = implode(',', $keyname); $s = "SELECT $sqladd FROM $tablename"; $s .= $this->cond_to_sqladd($cond); if(!empty($orderby)) { $s .= ' ORDER BY '; $comma = ''; foreach($orderby as $k=>$v) { $s .= $comma."$k ".($v == 1 ? ' ASC ' : ' DESC '); $comma = ','; } } $s .= ($limit ? " LIMIT $start, $limit" : ''); $return = array(); $result = $this->query($s, $this->rlink); while($data = mysql_fetch_assoc($result)) { $keyadd = ''; foreach($keyname as $k) { $keyadd .= "-$k-".$data[$k]; } $return[] = $table.$keyadd; } return $return; } public function index_update($table, $cond, $update, $lowprority = FALSE) { $where = $this->cond_to_sqladd($cond); $set = $this->arr_to_sqladd($update); $table = $this->tablepre.$table; $sqladd = $lowprority ? 'LOW_PRIORITY' : ''; $this->query("UPDATE $sqladd $table SET $set $where", $this->wlink); return mysql_affected_rows($this->wlink); } public function index_delete($table, $cond, $lowprority = FALSE) { $where = $this->cond_to_sqladd($cond); $table = $this->tablepre.$table; $sqladd = $lowprority ? 'LOW_PRIORITY' : ''; $this->query("DELETE $sqladd FROM $table $where", $this->wlink); return mysql_affected_rows($this->wlink); } public function index_count($table, $cond = array()) { $tablename = $this->tablepre.$table; $where = $this->cond_to_sqladd($cond); $arr = $this->fetch_first("SELECT COUNT(*) AS num FROM $tablename $where"); if(empty($arr)) { throw new Exception("get count from $tablename Failed!"); } return isset($arr['num']) ? intval($arr['num']) : 0; } public function index_maxid($key) { list($table, $col) = explode('-', $key); $tablename = $this->tablepre.$table; $arr = $this->fetch_first("SELECT MAX($col) AS num FROM $tablename"); if(empty($arr)) { throw new Exception("get maxid from $tablename Failed!"); } return isset($arr['num']) ? intval($arr['num']) : 0; } public function index_create($table, $index) { $table = $this->tablepre.$table; $keys = implode(', ', array_keys($index)); $keyname = implode('', array_keys($index)); return $this->query("ALTER TABLE $table ADD INDEX $keyname($keys)", $this->wlink); } public function index_drop($table, $index) { $table = $this->tablepre.$table; $keys = implode(', ', array_keys($index)); $keyname = implode('', array_keys($index)); return $this->query("ALTER TABLE $table DROP INDEX $keyname", $this->wlink); } public function table_create($table, $cols, $engineer = '') { empty($engineer) && $engineer = 'MyISAM'; $sql = "CREATE TABLE IF NOT EXISTS {$this->tablepre}$table (\n"; $sep = ''; foreach($cols as $col) { if(strpos($col[1], 'int') !== FALSE) { $sql .= "$sep$col[0] $col[1] NOT NULL DEFAULT '0'"; } else { $sql .= "$sep$col[0] $col[1] NOT NULL DEFAULT ''"; } $sep = ",\n"; } $sql .= ") ENGINE=$engineer DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;"; return $this->query($sql, $this->wlink); } public function table_drop($table) { $sql = "DROP TABLE IF EXISTS {$this->tablepre}$table"; try {$this->query("DELETE FROM {$this->tablepre}framework_count WHERE name='$table'", $this->xlink);} catch (Exception $e) {}; try {$this->query("DELETE FROM {$this->tablepre}framework_maxid WHERE name='$table'", $this->xlink);} catch (Exception $e) {}; return $this->query($sql, $this->wlink); } public function table_column_add($table, $colname, $colattr) { $default = strpos($colattr, 'int') !== FALSE ? "'0'" : "''"; $sql = "ALTER TABLE {$this->tablepre}$table ADD COLUMN $colname $colattr NOT NULL DEFAULT $default;"; try {$this->query($sql, $this->wlink);} catch (Exception $e) {}; return TRUE; } public function table_column_drop($table, $colname) { $sql = "ALTER TABLE {$this->tablepre}$table DROP COLUMN $colname;"; try {$this->query($sql, $this->wlink);} catch (Exception $e) {}; return TRUE; } public function fetch_first($sql, $link = NULL) { empty($link) && $link = $this->rlink; $result = $this->query($sql, $link); return mysql_fetch_assoc($result); } public function fetch_all($sql, $link = NULL) { empty($link) && $link = $this->rlink; $return = $data = array(); $result = $this->query($sql, $link); while($data = mysql_fetch_assoc($result)) { $return[] = $data; } return $return; } public function query($sql, $link = NULL) { empty($link) && $link = $this->wlink; defined('DEBUG') && DEBUG && isset($_SERVER['sqls']) && count($_SERVER['sqls']) < 1000 && $_SERVER['sqls'][] = htmlspecialchars(stripslashes($sql)); $result = mysql_query($sql, $link); if(!$result) { throw new Exception(self::br('MySQL Query Error:'.$sql.'. '.mysql_error())); } return $result; } public function connect($host, $user, $password, $name, $charset = '', $engine = '') { $link = mysql_connect($host, $user, $password, TRUE); if(!$link) { throw new Exception(self::br(mysql_error())); } $bool = mysql_select_db($name, $link); if(!$bool) { throw new Exception(self::br(mysql_error())); } if(!empty($engine) && $engine == 'InnoDB') { $this->query("SET innodb_flush_log_at_trx_commit=no", $link); } if($charset) { $this->query("SET names utf8, sql_mode=''", $link); } return $link; } private function cond_to_sqladd($cond) { $s = ''; if(!empty($cond)) { $s = ' WHERE '; foreach($cond as $k=>$v) { if(!is_array($v)) { $v = addslashes($v); $s .= "$k = '$v' AND "; } else { foreach($v as $k1=>$v1) { $v1 = addslashes($v1); $k1 == 'LIKE' && ($k1 = ' LIKE ') && $v1 = "%$v1%"; $s .= "$k$k1'$v1' AND "; } } } $s = substr($s, 0, -4); } return $s; } private function arr_to_sqladd($arr) { $s = ''; foreach($arr as $k=>$v) { $v = addslashes($v); $s .= (empty($s) ? '' : ',')."$k='$v'"; } return $s; } private function result($query, $row) { return mysql_num_rows($query) ? intval(mysql_result($query, $row)) : FALSE; } private function table_count($key) { $key = addslashes($key); $count = 0; $query = mysql_query("SELECT count FROM {$this->tablepre}framework_count WHERE name='$key'", $this->xlink); if($query) { $count = $this->result($query, 0); if($count === FALSE) { $this->query("INSERT INTO {$this->tablepre}framework_count SET name='$key', count='0'", $this->xlink); } } elseif(mysql_errno($this->xlink) == 1146) { $this->query("CREATE TABLE {$this->tablepre}framework_count (
				`name` char(32) NOT NULL default '',
				`count` int(11) unsigned NOT NULL default '0',
				PRIMARY KEY (`name`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci", $this->xlink); $this->query("INSERT INTO {$this->tablepre}framework_count SET name='$key', count='0'", $this->xlink); } else { throw new Exception('framework_cout 错误, mysql_error:'.mysql_error()); } return $count; } private function table_maxid($key) { $key = addslashes($key); list($table, $col) = explode('-', $key.'-'); $maxid = 0; $query = mysql_query("SELECT maxid FROM {$this->tablepre}framework_maxid WHERE name='$table'", $this->xlink); if($query) { $maxid = $this->result($query, 0); if($maxid === FALSE) { if($col) { $query = $this->query("SELECT MAX($col) FROM {$this->tablepre}$table", $this->xlink); $maxid = $this->result($query, 0); } else { $maxid = 0; } $this->query("INSERT INTO {$this->tablepre}framework_maxid SET maxid='$maxid', name='$table'", $this->xlink); } } elseif(mysql_errno($this->xlink) == 1146) { $this->query("CREATE TABLE `{$this->tablepre}framework_maxid` (
				`name` char(32) NOT NULL default '',
				`maxid` int(11) unsigned NOT NULL default '0',
				PRIMARY KEY (`name`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci", $this->xlink); if($col) { $query = $this->query("SELECT MAX($col) FROM {$this->tablepre}$table", $this->xlink); $maxid = $this->result($query, 0); } else { $maxid = 0; } $this->query("INSERT INTO {$this->tablepre}framework_maxid SET name='$table', maxid='$maxid'", $this->xlink); } else { throw new Exception("{$this->tablepre}framework_maxid 错误, mysql_errno:".mysql_errno().', mysql_error:'.mysql_error()); } return $maxid; } public static function br($s) { if(!core::is_cmd()) { return nl2br($s); } else { return $s; } } private function parse_key($key) { $sqladd = ''; $arr = explode('-', $key); $len = count($arr); $keyarr = array(); for($i = 1; $i < $len; $i = $i + 2) { if(isset($arr[$i + 1])) { $sqladd .= ($sqladd ? ' AND ' : '').$arr[$i]."='".addslashes($arr[$i + 1])."'"; $t = $arr[$i + 1]; $keyarr[$arr[$i]] = is_numeric($t) ? intval($t) : $t; } else { $keyarr[$arr[$i]] = NULL; } } $table = $arr[0]; if(empty($table)) { throw new Exception("parse_key($key) failed, table is empty."); } if(empty($sqladd)) { throw new Exception("parse_key($key) failed, sqladd is empty."); } return array($table, $keyarr, $sqladd); } public function version() { return mysql_get_server_info($this->rlink); } public function __destruct() { if(!empty($this->wlink)) { mysql_close($this->wlink); } if(!empty($this->rlink) && !empty($this->wlink) && $this->rlink != $this->wlink) { mysql_close($this->rlink); } } } ?><?php
 if(!defined('FRAMEWORK_PATH')) { exit('FRAMEWORK_PATH not defined.'); } interface cache_interface { public function __construct($conf); public function get($key); public function set($key, $data, $life = 0); public function update($key, $data); public function delete($key); public function maxid($table, $val = 0); public function count($table, $val = 0); public function truncate($pre = ''); } ?><?php
 if(!defined('FRAMEWORK_PATH')) { exit('FRAMEWORK_PATH not defined.'); } class cache_memcache implements cache_interface { public $conf; public function __construct($conf) { $this->conf = $conf; } private $support_getmulti; public function __get($var) { if($var == 'memcache') { if(extension_loaded('Memcached')) { $this->memcache = new Memcached; } elseif(extension_loaded('Memcache')) { $this->memcache = new Memcache; } else { throw new Exception('Memcache Extension not loaded.'); } if(!$this->memcache) { throw new Exception('PHP.ini Error: Memcache extension not loaded.'); } if($this->memcache->connect($this->conf['host'], $this->conf['port'])) { $this->support_getmulti = !empty($this->conf['multi']) || method_exists($this->memcache, 'getMulti'); return $this->memcache; } else { throw new Exception('Can not connect to Memcached host.'); } } } public function get($key) { $data = array(); if(is_array($key)) { if($this->support_getmulti) { $arrlist = $this->memcache->getMulti($key); foreach($key as $k) { !isset($arrlist[$k]) && $arrlist[$k] = FALSE; } return $arrlist; } else { foreach($key as $k) { $arr = $this->memcache->get($k); $data[$k] = $arr; } return $data; } } else { $data = $this->memcache->get($key); return $data; } } public function set($key, $value, $life = 0) { return $this->memcache->set($key, $value, 0, $life); } public function update($key, $value) { $arr = $this->get($key); if($arr !== FALSE) { is_array($arr) && is_array($value) && $arr = array_merge($arr, $value); return $this->set($key, $arr); } return 0; } public function delete($key) { return $this->memcache->delete($key); } public function truncate($pre = '') { return $this->memcache->flush(); } public function maxid($table, $val = FALSE) { $key = $table.'-Auto_increment'; if($val === FALSE) { return intval($this->get($key)); } elseif(is_string($val) && $val{0} == '+') { $val = intval($val); $val += intval($this->get($key)); $this->set($key, $val); return $val; } else { $this->set($key, $val); return $val; } } public function count($table, $val = FALSE) { $key = $table.'-Rows'; if($val === FALSE) { return intval($this->get($key)); } elseif(is_string($val)) { if($val{0} == '+') { $val = intval($val); $n = intval($this->get($key)) + $val; $this->set($key, $n); return $n; } else { $val = abs(intval($val)); $n = max(0, intval($this->get($key)) - $val); $this->set($key, $n); return $n; } } else { $this->set($key, $val); return $val; } } } ?>